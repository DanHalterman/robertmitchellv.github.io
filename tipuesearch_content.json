{"pages":[{"title":"About Me","tags":"pages","url":"http://robertmitchellv.com/about-me.html","text":"The brief bio I am father, husband, and recent Master of Science in Information Science (MSIS) recipient who is passionate about code, complexity, design, dichotomy busting, cuisine, travel, + striving for balance across the board in my life. I love conceptual thinking and am expanding my worldview through the acquisition of knowledge. With this site, I hope to document what I learn and share what I know. Still curious? Read on My background is rooted in theology, philosophy, and continental thought. This formed the basis for my academic exploration. My BA was in both French and comparative literature at UCLA. In the US, the ‘comp lit' field is dominated by literary criticism + the search for universal truths and archetypes in global literature, which is not always apparent from the field's name. Additionally, I took a fair amount of philosophy courses (my major originally), German language, literature, art, and philosophy courses with a bit of Scandinavian literature + film courses and a couple courses on dead languages here and there (Old Norse was particularly interesting to study). My Master's degree is in Information Science (MSIS). Furthermore, I also completed both the Information Systems program of study; a narrower focus within the MSIS degree as well as a Graduate Academic Certificate (GAC) in Digital Content Management. The MSIS is designed for information work in many different fields from information brokerage, database analytics, chief information officer, user experience designer, information architect, knowledge manager, system librarian, and many more. The information systems track taught me how to support my organization to gain strategic and tactical competitive advantages, which we can call knowledge management or business intelligence. It supports more technical knowledge and builds more technical skills than the other tracks within the MSIS. Last, the GAC in Digital Content Management provided me with a theoretical foundation + conceptual toolkit to help me manage digital content, build applications, and develop services that respond to institutional + individual user needs. I've been lucky enough to do a fair amount of traveling; a few months in Japan at 19, a year in Paris at 23/24, summer in Germany and Scandinavia at 24, and some quick trips to different places while spending quality time in these locations. These experiences have shaped who I am as an individual, before I hit on a girl sitting across from me on the Metro, eventually marrying her (best impulsive move ever). I hope to contribute posts on my site that interact with my interdisciplinary interests with special focus on the semantic relationships between objects and concepts. I'm not always as interested in the epistemological aspect of things as I might appear–really I think I enjoy metaphysical speculation (otherwise, why would I have become interested in philosophy at all?). I believe that everything is connected, and the 21st century will be about discovering these connections—hopefully I can be a part of this. Go Back!"},{"title":"Connect","tags":"pages","url":"http://robertmitchellv.com/connect.html","text":"Some of the places and online spaces you can find me: | Twitter | GitHub | LinkedIn | Soundcloud Feel free to connect with me via the above referenced outlets! Go Back!"},{"title":"Vitae","tags":"pages","url":"http://robertmitchellv.com/vitae.html","text":"Personal Philosophy I believe that the 21st century requires a more multifaceted toolkit if we hope to solve complex challenges—process + task oriented approaches balanced within a framework that fosters strategic thinking. That interdisciplinary relationships can be strengthened through active community participation— working toward something with the shared value of doing good. I bring a lot of energy + enthusiasm to the projects that I become involved in. I thrive in situations that require imagination + innovation. I have a broad range of interests; from academic inquiry, classical and contemporary thought, the music + cuisine of other cultures, the arts, travelling, languages; to a passion for social justice, education for all people, + that our most vulnerable deserve respect + to be treated with dignity + fairness Ultimately I hope that the work I do is helpful&8212;that it enables discovery or provides clarity. The gamut of which is not narrow, but wide—a lot can be helpful or meaningful. Things practical and principled. I hope to further grow as this philosophy guides me. Personal Skills I am dedicated + hard working—a good communicator + active community participant. I work well on team efforts + projects with an eye toward outcomes I am: creative honest friendly enthusiastic keen to learn new things + take on new roles reliable a lateral thinking motivated I am able to: speak + read French read + understand German listen to + follow instructions accurately work cooperatively take on new challenges complete tasks support others identify new innovations + technologies while working toward implementing them be proactive Technical Skills Web Technologies: HTML, CSS, Javascript, Jekyll, Wordpress, Drupal, Information Architecture, + UX/UI design. Coding: Python + Javascript; interested in the scientific computing + machine learning libraries of Python and the Node, Meteor, and D3 frameworks in JS. OSs: OS X, Linux, + Windows; learning shell scripting with bash and zsh. Data: Knolwedge of Relational Databases, SQL, knowledge organization theory, + currently learning noSQL through MongoDB. Data Analysis: basic data janitorial knowledge with Pandas, experience with evaluation and data collection + learning the basics of machine learning with kaggle tutorials. Metadata schemas: knowledge of AACR2, RDA, MODS, METS, + PREMIS Education University of North Texas | Master of Science in Information Science (2013) University of California, Los Angeles (UCLA) | Bachelor of Arts in French + comparative literature (2008 / double major) Université de la Sorbonne Nouvelle (Paris III) | Student exchange (2006—2007) Work Experience Skid Row Housing Trust_Los Angeles, CA Health Services, Data, and Analysis Coordinator / October 2014— Present responsible for data collection; evaluating new collection tools and survey instrument implementation for health related grants and continual quality improvement database administrator for Resdsident Services department; monitors end-user input to track outcomes responsible for pulling data for reports; quarterly and grant specific exploring open-source database alternatives to reduce organizational cost and fit within the IT ecosystem writing an analysis + evaluation manuel to guide staff in analysing their own data; will mostly rely on Python and SQL with source code availible (in progress) working with future partnerships at leveraging data to enable future funding for supportive services + better health access for residents designed and edited Peer Advocate zine for commercial printing project troubleshooter par excellence. UCLA Powell Library_Los Angeles, CA Social Media Intern / January 2013—November 2013 designed + implemented new digital signage/print flyers to promote library outreach, services, + events created new social media presence for (then) new platform Vine to promote library collections + services designed online content that highlighted collections, incorporated teaching + learning services + provided wide audience appreciation facilitated presentation on approach + ideas to UCLA Library's social media steering committee operated multi-tiered social media platform apparatus LAC Group | on Assignment for USC Library_Los Angeles, CA Library Clerk / June 2013 searched bibliographic records in ILS + assisted with processing + discarding of duplicates performed copy cataloging of print monographs + serials willingness to take on new/unfamiliar tasks in order to meet project contract requirements maintained strong attention to detail Taylor Mortgage Lawyers_Pasadena, CA Administrator / May 2010—February 2011 drafted outgoing legal correspondence + created document templates to ease workflow managed + trained receptionists on tasks, etiquette, + computer/office equipment communicated effectively with diverse groups acted as firm reference point for difficult or challenging matters immense use of research skills, ease in digesting difficult subjects/literature, teamwork, + timeliness Chino Valley Unified School District_Chino, CA Substitute Teacher / September 2008—July 2009 facilitated classroom instruction for wide socio-economic populations + age groups able to pull together resources on the fly + improvise in the absence of a lesson plan passion to teach students useful skills for successful academic career UCLA Philosophy Department_Los Angeles, CA Library Assistant / January 2006—August 2006 responsible for the circulation + shelving of philosophy department's library materials assisted with document delivery for department researchers and faculty carefully handled, cataloged (rudimentary metadata), + shelved donated library materials from estates of previous emeritus professors; chiefly Dr. Rudolf Carnap Accomplishments Designed, proofed, prepared, + labored over Peer Advocate 'Zine for Skid Row Housing Trust's Hilton Project 'Zine \"I Got You\", which will be released during a end of grant event for all project participants Was asked to help design + brainstorm a flyer for the UCLA Library system because of interest in design + outreach for libraries—the final project was the \"Top 10 Things\" flyer, which was a successful campaign to engage students in library programming + services Was recognized by two articles online for work promoting library services + collections through early-adoption of Vine Interests Learning to code; currently, I'm in my second semester of CS courses and am taking a Javascript course and a Linux course. Additionally, I am enrolled in a linear algebra course through Coursera as well as a discrete mathematics course through edX. I try to challenge my knoweldge as much as possible in order to fill in knowledge gaps for advanced computer science/computation programs (hopefully I'll be moving to Europe next fall!). Beverages: third-wave coffee shops/roasts, home-brewing on V60, Chemex, + Yama Siphon; natural wine + out of the ordinary grapes, flavors, + regions; beers with lightly roasted malt--especially aged, or spontaneously fermented (read: sour!) Design: I love typefaces + modernism; as you can see from my portfolio, it is something I like to do when time permits Exploration: I like to explore other places through travel + food; ideologies through reading + communicating, + world through science + discovery! Go Back!"},{"title":"\"My Pandas Snippits—always evolving\"","tags":"misc","url":"http://robertmitchellv.com/blog/my-pandas-snippits-always-evolving.html","text":"As I learn more this page will be updated (and hopefully improved!) The goal of this post is to keep me from googling pandas questions that I've forgotten. I don't know how many times I've looked at the results and seen five or more StackOverflow links that have clearly already been clicked on; I feel like Sisyphus when this happens! So, here is what I'm currently committing to memory: ### Make matplotlib.pyplot look better with no effort: import matplotlib.pyplot as plt plt . style . use ( 'ggplot' ) % matplotlib inline ### Delete column del df [ 'colName' ] ### Rename columns df . columns = [ 'col1' , 'col2' , 'col3' ] # this does not reindex columns ### Combine columns df [ 'newCol' ] = df [ 'col1' ] . map ( str ) + data [ 'col2' ] + data [ 'col3' ] . astype ( 'str' ) ### Copy column df [ 'newCol' ] = df [ 'oldCol' ] # where newCol is the copy ### Reindex columns cols = [ 'col1' , 'col2' , 'col3' , 'col4' ] # list of how you'd like it df = df . reindex ( columns = cols ) ### Find out how many NaN values you have in a column df [ 'colName' ] . isnull () . sum () ### Show unique values df [ df [ 'colName' ] . unique ()] ### Create a frequency column from another column df [ 'freq' ] = df . groupby ( 'colName' )[ 'colName' ] . transform ( 'count' ) ### Delete row df = df . drop ( 2 ) # where two is the df's index df = df . drop ( 'rowName' ) # if you reindexed ### Remove characters before a specific character df [ 'colName' ] = df [ 'colName' ] . apply ( lambda x : x . split ( '-' )[ - 1 ]) # char = - ### Remove characters after a specific character df [ 'colName' ] = df [ 'colName' ] . apply ( lambda x : x . split ( '-' )[ 0 ]) # char = - ### Remove characters, e.g., commas from data df [ 'colName' ] = df [ 'colName' ] . str . replace ( ',' , '' ) ### Convert datatypes, e.g., object to float df [[ 'col4' , 'col5' , 'col10' ]] = df [[ 'col4' , 'col5' , col10 ]] . astype ( float ) ### Convert string date to datetime64 df [ 'strDate' ] = pd . to_datetime ( df [ 'strDate' ]) ### Filter datetime64 column values import datetime df [ df [ 'colName' ] >= datetime . date ( 2015 , 1 , 1 )] ### Convert NaN values to zeros (or anything else) df = df . fillna ( 0 ) # remember that this returns a new object! ### Replace string values with numeric representations dictionary = { 'value1' : 1 , 'value2' : 2 , 'Value3' : 3 } df = df . replace ({ 'colName' : dictionary }) ### Replace multiple cells of a column only with a different string df . loc [ df [ 'colName' ] . str . contains ( 'word' ), df [ 'colName' ]] = \"Different Word\" # or df . loc [ df [ 'colA' ] . str . contains ( 'word' ), [ 'colB' ]] = 5 # to change a cell in a different column ### Project data based on a value range from a column df [ df . colWithNumbers <= 360 ] # shows me values less than or equal to 360 df [ df [ 'colWithStrings' ] . str . contains ( \"word\" )] # shows me values with 'word' in them ### Project data based on two values (use and or pipe symbol to denote relationship) df [( df [ 'colWithString' ] . str . contains ( \"word\" )) & ( df . colWithNumber <= 5 )] # and df [( df [ 'colWithString' ] . str . contains ( \"firstWord\" )) | ( df [ 'colWithString' ] . str . contains ( \"secondWord\" ))] # or ### Groupby as variable groupedby = df . groupby ( df . colName ) # or: groupedby = df . groupby ( df . colName ) . add_suffix ( '/Mean' ) # add column suffixes ### Use groupedby variable and find the mean for your values groupedbyMean = groupedby . mean ()"},{"title":"\"First Kaggle Submission—Random Forest Classifier\"","tags":"misc","url":"http://robertmitchellv.com/blog/first-kaggle-submission-random-forest-classifier.html","text":"I have seen kaggle mentioned on twitter a lot; mostly by the data scientists and researchers I look up to, but there's never been much confidence that the site was for me in any way—mostly because I was a long way from my dream data science job with yet so much to learn. Notwithstanding, I cannot help but try and hack my way to my destination! I think it's a part of my learning process: thrust myself in the midst of something I don't understand, get stuck, try to get unstuck, finish with some understanding of what I was doing. So, when I saw this post by Chris Clark , I thought that it was about time I try and hack my way from recently learning Python to machine learning with SciKit-Learn—why not!?—I thought. It reminded me of when I decided to sign up with an account at GitHub; I was initially intimidated because it was new to me. Now, I use git in the command line, host my website there, and use it for almost everything (still learning new things about git everyday as well). Chris's post was excellent but there was one problem: the code was aimed at Python 2.7 users and I had just spent the previous semester learning Python 3 (which means I don't really know 2.7; and avoid it all the time \"where are the parens for this print statement??\"). As a personal challenge, I decided to use the code and update it to Python 3, which was both fun and challenging (I'm measuring 'update' to mean, 'running in my Python 3.4 interpreter without error messages'). This may be an easy task but there were a few snags for me. In the spirit of trying to document the things I learn, I've decided to chronical my results here—if there are any errors or issues with this code, please let me know so I can try to correct, learn, and grow! I also found Chris's updated code on GitHub, which uses Pandas and I've been trying to get started with Pandas as well so; win, win. As an aside, I use Anaconda and Vim for the enviornment and editing, respectively. My code can be found on GitHub . The Submission was a part of the Predicting a Biological Response competition, and the training, test, and benchmark data sets are provided. Since the competition wants us to predict binary values, Chris notes that this data set is a good introduction to ensemble classifiers, because the prediction is a binary value (0 or 1). It was also great to take a closer look at both the Pandas and SciKit-Learn's documentation to troubleshoot. I tried to use the comments to explain as much as possible so future me will not be baffled, which I can say is helpful since I'm looking at this one month out and it makes total sense (at least to me). ### Kaggle Submission Code \"\"\" //kaggle submission //Biological Response --> random forest classifier Author: Robertmitchellv Date: Dec 16, 2104 Revised: Dec 22, 2014 \"\"\" import pandas as pd from sklearn.ensemble import RandomForestClassifier def main (): # create the training + test sets try : data = pd . read_csv ( 'Data/train.csv' ) except IOError : print ( \"io ERROR-->Could not locate file.\" ) target = data . Activity . values train = data . drop ( 'Activity' , axis = 1 ) . values test = pd . read_csv ( 'Data/test.csv' ) . values # create and train the random forest and call it 'rf' # --> n_estimators = the number of trees in this forest, viz. # 100 trees of forest # --> n_jobs set to -1 will use the number of cores present on your system. rf = RandomForestClassifier ( n_estimators = 100 , n_jobs = - 1 ) # fit(X, y[, sample_weight]) = build a forest of tress from the # training set (X, y) rf . fit ( train , target ) # predict_proba(X) predict class probabilities for X as list predicted_probs = [ x [ 1 ] for x in rf . predict_proba ( test )] # prep data for use in pd.Series molID , predictProbs = prepData ( predicted_probs ) # use a dictionary with keys as col headers and values as lists pulled from # previous prep function df = { 'MoleculeID' : molID , 'PredictedProbability' : predictProbs } # pandas DataFrame = a tabular datastructure like a SQL table predicted_probs = pd . DataFrame ( df ) # write predicted_probs to file with pandas method .to_csv()--add header # for submission try : predicted_probs . to_csv ( 'Data/submission.csv' , index = False ) print ( \"File successfully written; check 'Data' folder\" ) except IOError : print ( \"io ERROR-->Could not write data to file.\" ) # preparing data for conversion to pd.DataFrame def prepData ( alist ): # prepare list to be converted to pandas Series colOne = [] colTwo = [] idx = 1 # for loop to set MoleculeID to match the benchmark; # place values into list for easier wrangling as pd.Series for i in alist : colOne . append ( idx ) colTwo . append ( i ) idx += 1 return colOne , colTwo # call the main function main () After performing this--Chris suggested to submit to kaggle; being an extra careful person by nature, I just had to perform the evaluation and cross validation first (I don't know if any of you feel the same way). Unfortunately, I don't really understand how the code works--this is one of the problems when hacking through tutorials. ### Evaluation/Logloss \"\"\" //kaggle submission //Biological Response --> evaluation function (from Grunthus' post) \"\"\" import scipy as sp def logloss ( act , pred ): \"\"\" Vectorised computation of logloss \"\"\" #cap in official Kaggle implementation, #per forums/t/1576/r-code-for-logloss epsilon = 1e-15 pred = sp . maximum ( epsilon , pred ) pred = sp . minimum ( 1 - epsilon , pred ) #compute logloss function (vectorised) ll = sum ( act * sp . log ( pred ) + sp . subtract ( 1 , act ) * sp . log ( sp . subtract ( 1 , pred ))) ll = ll * - 1.0 / len ( act ) return ll The cross validation was trickier to understand, which I think is mostly due to my not really understanding what ensemble classifiers do, how the random forest classifier works, and more specifically; what training, test, and target data do within machine learning. This gave chase through the SciKit-Learn documentation and other resources online to get a better understanding of what the code was doing—there's a lot to learn! The interesting aspect is how the SciKit-Learn reserves some actual data that it can test against the classifier's predicted values. I tried to show in the comments how I was understanding what the code did at the time. ### Cross Validation \"\"\" //kaggle submission //Biological Response --> cross validation \"\"\" from sklearn.ensemble import RandomForestClassifier from sklearn.cross_validation import KFold import numpy as np import pandas as pd import logloss def main (): #read data from csv; use nparray to create the training + target sets try : train = pd . read_csv ( 'Data/train.csv' ) except IOError : print ( \"io ERROR-->Could not locate file.\" ) target = np . array ([ x [ 0 ] for x in train ]) train = np . array ([ x [ 1 :] for x in train ]) # in this case we'll use a random forest, but this could be any classifier model = RandomForestClassifier ( n_estimators = 100 , n_jobs = - 1 ) # simple K-Fold cross validation. 10 folds. cv = KFold ( n = len ( train ), n_folds = 10 , indices = False ) #iterate through the training and test cross validation segments and #run the classifier on each one, aggregating the results into a list results = [] for traincv , testcv in cv : prob = model . fit ( train [ traincv ], target [ traincv ]) . predict_proba ( train [ testcv ]) results . append ( logloss . llfun ( target [ testcv ], [ x [ 1 ] for x in prob ])) #print out the mean of the cross-validated results print ( 'Results: ' , str ( np . array ( results ) . mean ())) # call main function main () After I was able to execute the submission, logloss, and cross validation code without any errors, I submitted my code to kaggle. It was an exciting moment waiting to see what kind of score I would have recieved had I actually participated in the competition. I would have placed at 325 (well, I would have tied with another user for 325th); check out my results below. Well, that wraps up my first submission to kaggle. I really hope this is the first of many. Right now I'm working through the Think Stats + Think Bayes books to refresh my stats knowledge. I'm trying to find time to work on the Titanic tutorial through kaggle as well as perhaps throw a hat in the ring for Booz Hamilton's Data Science Bowl. There's so much to learn and I can't wait for these concepts to become more natural and familiar."},{"title":"\"The Python Journey—One Semester with Python 3.4\"","tags":"Python","url":"http://robertmitchellv.com/blog/the-python-journey-one-semester-with-python-34.html","text":"This was quite a journey for me. I started the same way everyone else has; with my very first \"Hello World\" program written in Python 3: # Hello World ! program . def main () : # get the user 's name name = input(' What is your name ? ') print(' Hello World ! I am ' , name ) # Call the main function main () This was the first assignment for my Programming in Python course. I was not content to have it only print \"Hello World\"—no, I need to personalize it in some small way. The following was really interface (if I'm speaking pythonically); to a wider interest in programming qua programming: name = input('What is your name? ') Nevertheless, I was not content with this. I allowed myself to be sucked into a forceful vortex that had me thinking I'd be using Jupytr notebooks, matplotlib, etc., to show off how much I know about Python from Twitter. Notwithstanding, the above is what was submitted because I didn't know how to do any of the fancy stuff I read about. I didn't know how to use Pandas. I didn't know how to use Blaze. I didn't even know how to use 'conda update conda' in my terminal (oh; it's a package manager—not just an easy way to install Python 3.4 on my computer at work without Admin privlages!). The reality is that I still have a lot to learn—I'm still in the shallow end. Nothing prepared me for the absolute angst associated with trying to implement a (beginner's attempt at) the Object Oriented Programming (OOP) paradigm as a final extra-credit assignment! I didn't even know I had been writing, although very functional; or, very function reliant, procedural code. Somewhere between nesting lists inside of dictionaries, iterating over them, and implementing 'try, except' statements, I thought I was really going places with my code. OOP razed that sandcastle quite briskly. Like a kind of soverign and violent natural phenomena. From my first program to my 10th program, this is how far I have come. This is my attempt at OOP, classes, 'init' methods, ~~inheritance~~ composition, and more. It's likely pretty flawed and could be made less redundant, but I didn't copy StackOverflow and tried to figure it out on my own; so, I'm damn proud of it! There were some programs specs that I needed to show an understanding of; quickly, the program specs: Each question will have four possible answers Each player will take turns with the questions There will be a total of 10 questions, each player getting a chance to answer five of them. If the player selects the correct answer, they earn a point. Tell the player whether they got it right or wrong. Must create a 'Question' class to hold data with the following attributes: A trivia question Possible answer 1 Possible answer 2 Possible answer 3 Possible answer 4 The number of the correct answer, e.g., 1, 2, 3, or 4 Question class must have an ' init ' method, accessors, mutators, and a ' str ' method. Use value-returning functions; one named createQuestionsAnswers() that creates the list to display questions and keeps tracks of user input to let players know if they won, lost, or tied. Here is my solutions: # -*- coding: utf-8 -*- \"\"\" A10--Trivia Game! --> two player trivia game --> OOP approach to building the game with classes and objects \"\"\" import csv import random # the Question class acts as a placeholder for the parts of the question # needed to construct questions and check answers class Question : # __init__ uses the Data class method getData through composition def __init__ ( self , question , a1 , a2 , a3 , a4 , answer , ansNum ): self . getData = Data ( 'csv' ) self . question = question self . a1 = a1 self . a2 = a2 self . a3 = a3 self . a4 = a4 self . answer = answer self . ansNum = ansNum # the method performs better as a class method since it instantiates the # Question class with sample questions for the game @classmethod def getQuestion ( cls , triviaDict ): # using random to get 10 random numbers between a specific range for # trivia questions randomGenerator = random . sample ( range ( 1 , 817 ), 1 ) # for an individual random number in the sample range # --> iterate and use number as index for the trivia questions for i in randomGenerator : question = triviaDict [ i ][ 0 ] a1 = triviaDict [ i ][ 1 ] a2 = triviaDict [ i ][ 2 ] a3 = triviaDict [ i ][ 3 ] a4 = triviaDict [ i ][ 4 ] answer = triviaDict [ i ][ 5 ] ansNum = triviaDict [ i ][ 6 ] # this creates an instance to return (from question class) aQuestion = Question ( question , a1 , a2 , a3 , a4 , answer , ansNum ) return aQuestion # this is a part of using composition rather than inheritance to get the # attributes from the getData method def __getattr__ ( self , attr ): return getattr ( self . getData , attr ) # this method sets up the question (also checks answer) @classmethod def setupAsk ( cls , q ): print ( ' \\n ' , q . question , ' \\n\\t 1: ' , q . a1 , ' \\ \\n\\t 2: ' , q . a2 , ' \\n\\t 3: ' , q . a3 , ' \\ \\n\\t 4: ' , q . a4 , ' \\n ' ) # make sure the user's input works while True : try : choice = int ( input ( \" \\n What's your answer? \\n --> \" )) except ValueError : print ( ' \\n Sorry, the answer only accepts numbers; please \\ enter a number 1-4' ) choice = int ( input ( \" \\n What's your answer? \\n --> \" )) finally : if choice in range ( 1 , 5 ): break # if the question is correct, return true; if not, return false if choice == q . ansNum : print ( ' \\n Correct! \\n ' , q . answer ) return True elif choice != q . ansNum : print ( ' \\n Incorrect! \\n ' , q . answer ) return False # the Data class handles openning the file and preparing it to be used by # the Question and Game class class Data : def __init__ ( self , filetype ): self . filetype = filetype # opens the CSV to read and prepare it to be used in computaiton later @classmethod def getData ( cls ): # make sure there isn't an IO error try : # open the csv file + use an index accumulator for dictionary with open ( 'trivia.csv' ) as csvFile : readCSV = csv . reader ( csvFile , delimiter = ',' ) index = 0 # questions, answer choices, and answers dictionary rowDict = {} questionData = {} # reading the trivia questions for row in readCSV : rowDict [ index ] = row question = rowDict [ index ][ 0 ] a1 = rowDict [ index ][ 1 ] a2 = rowDict [ index ][ 2 ] a3 = rowDict [ index ][ 3 ] a4 = rowDict [ index ][ 4 ] answer = rowDict [ index ][ 5 ] # figure out which answer is correct and assign a variable if answer == a1 : ansNum = 1 elif answer == a2 : ansNum = 2 elif answer == a3 : ansNum = 3 elif answer == a4 : ansNum = 4 else : print ( \"Error! No correct answer\" ) # place questions into new dictionary in the right order questionData [ index ] = [ question , a1 , a2 , a3 , a4 , \\ answer , ansNum ] index += 1 return questionData except IOError : print ( \"The file could not be found.\" ) # the Game class is where the bulk of the game's structure is found class Game : def __init__ ( self , playerID , gamePoints ): self . playerID = playerID self . gamePoints = gamePoints # method to create instances for questions and find out if a quesiton # was answered correctly or not def round ( self , qClass , data ): gamePoints = 0 # reset to 0 for new round # instances q1 = qClass . getQuestion ( data ) q2 = qClass . getQuestion ( data ) q3 = qClass . getQuestion ( data ) q4 = qClass . getQuestion ( data ) q5 = qClass . getQuestion ( data ) # return value is true or false; this computes points if qClass . setupAsk ( q1 ) == True : gamePoints += 1 if qClass . setupAsk ( q2 ) == True : gamePoints += 1 if qClass . setupAsk ( q3 ) == True : gamePoints += 1 if qClass . setupAsk ( q4 ) == True : gamePoints += 1 if qClass . setupAsk ( q5 ) == True : gamePoints += 1 # let the user know what happenned this round print ( 'you won {} points this game!' . format ( gamePoints )) return gamePoints def main (): # local variables flag = False gameNum = 1 # instance of Data class data = Data ( 'csv' ) questionsData = data . getData () # instance of Question class with filler data questions = Question ( 'question' , 'a1' , 'a2' , 'a3' , 'a4' , \\ 'answer' , 'ansNum' ) # create both players playerOne = Game ( str ( input ( 'PLAYER ONE// \\n Enter your name: ' )), 0 ,) playerTwo = Game ( str ( input ( 'PLAYER TWO// \\n Enter your name: ' )), 0 ,) # while loop to keep the game going if the user chooses while flag != True : # let the user know which round they're playing print ( ' \\n ROUND ' , gameNum , '// \\n Player One' ) # first player instance; asks five questions p1round = playerOne . round ( questions , questionsData ) print ( \"\"\" +++++++++++++++++++++++++++++++++++++++++++++++++ + SWITCH PLAYERS! + +++++++++++++++++++++++++++++++++++++++++++++++++ \"\"\" ) # let the user know to switch players print ( ' \\n ROUND ' , gameNum , '// \\n Player Two' ) # second player instance; asks the five quesitons p2round = playerTwo . round ( questions , questionsData ) # let the user know which round they are on with accumulator gameNum += 1 # figure out who won and use user's inputed name and their points # in print statement if p1round < p2round : print ( 'Thank you for playing! {} is the winner with {} total \\ game points!' . format ( playerTwo . playerID , p2round )) elif p2round < p1round : print ( 'Thank you for playing! {} is the winner with {} total \\ game points!' . format ( playerOne . playerID , p1round )) elif p2round == p1round : print ( 'There was a tie! Both {} and {} both earned {} total \\ game points; but you are both still \\ winners!' . format ( playerOne . playerID , playerTwo . playerID , \\ p1round )) # find out if user wants to continue + validate user response while True : try : choice = str ( input ( \" \\n Keep playing? \\n --> \" )) . upper () except ValueError : print ( \"Sorry, enter either a 'Y' for 'Yes', or 'N' for 'No'.\" ) finally : if choice == 'N' : flag = True break if choice == 'Y' : break else : print ( \"please enter either a 'Y' for 'Yes', or 'N' \\ for 'No'.\" ) # say bye to players and quit the program print ( ' \\n Thank you for playing! See you next time! \\n ' ) main () I couldn't help but think about Plato when I was trying to understand how Objects work in Python. There's something really similar about how a 'class' has a kind of ontos —that it isn't just a blueprint—it exists, and it did exist before the 'init' method gave it attributes; that prescriptive human speculation we come up with when describing the form of something abstract like 'the Beautiful' (although it's been a while since my Phil 100A course at UCLA—I hope I'm not misrepresenting the Phaedo ). The course is over but I have a few titles I purchased from Packt to dig a little deeper. Suggestions are always welcome; the journey's telos is to learn; and learn I intend to do!"},{"title":"\"Foucault's Challenge to Modernist Classification\"","tags":"Philosophy, Knowledge Organization","url":"http://robertmitchellv.com/blog/foucaults-challenge-to-modernist-classification.html","text":"In Foucault's Les Mots et les choses (The Order of Things), he notes a passage in Borges that, for him, demonstrates the limitations of taxonomic assertions in the face of exotic systems of thought—via Borges, he quotes a ‘certain Chinese encyclopedia' in which it is written: animals are divided into: (a) belonging to the Emperor, (b) embalmed, (c) tame, (d) sucking pigs, (e) sirens, (f) fabulous, (g) stray dogs, (h) included in the present classification, (i) frenzied, (j) innumerable, (k) drawn with a very fine camelhair brush, (l) et cetera, (m) having just broken the water pitcher, (n) that from a long way off look like flies 1 What shocks Foucault about this passage is what connects these categories—i.e., the structure that links these strange juxtaposed oddities: the alphabetical series 2 . Foucault questions on what bedrock would kinship between ‘(i) frenzied, (j) innumerable, (k) drawn with a very fine camelhair brush' -animals meet, other than the non-space of the utterance itself; i.e., the non-space of language 3 . Language can only display this kinship in an ‘unthinkable space' (abstract locus)—Borges wants to remove the ‘operating table' that enables thought to order, divide, and classify external entities 4 . Effectively, this removes the ground upon which, \"since the beginning of time, language has intersected space\" 5 . Borges' works often lies in the abstract space of the ‘heterotopia' 6 , which \"desiccates speech, stops words in their tracks, contests the very possibility of grammar at its source; […] [to] dissolve our myths and sterilize the lyricism of our sentences\" 7 . This highlights the challenge of classifying in the post-modern library, for now there is an unforeseen danger—not incongruous disorder but the linking together of things that are inappropriate [&#94;8]. A perfect classification scheme that represents a universe of knowledge is the pipe-dream of the modernist; our observations are not independent of the external world, which undermines our ability to classify. We are enmeshed in our world; contextualized in the milieu that is the object of our analysis. We have no bird's eye view—our objectivity has no locus from which to observe. Nevertheless, I feel that there is a space to enhance knowledge organization. First, I believe it is important to shed the illusion of a temporal permanence of facts, which is not solid and more fluid. Meaning, our reconstructions of the external world mirrored by our knowledge organization schemes change through time and are in flux. Second, I believe it is important to increase transparency and acknowledge bias which can exist through ethnocentrism, race, religion, gender, sex, power, language, geography, et cetera. Effectively this is similar to Jung's notion of the shadow, that as humans we feel that it is silly to believe we cannot accurately describe the external world—we all agree on things, we test them, and we derive data with which to harness confidence in talking objectively about the external world. We do this daily. It is this confidence that leaves us blind to the shadow of our foundation; like Venice, we are sinking. In order to bring ourselves back to a form of equilibrium we must admit that our shadow exists, namely, that we bring as much to our observations than we leave and, in light of this; we should attempt to root out future bias through honesty and self-understanding. In this way, we stand the chance of building more honest reflections of knowledge. And, again, in this way, we stand the chance of achieving some kind of universe of human knowledge, or at least a good representation of what we feel that we know. Foucault, M. 2002. The order of things an archaeology of the human sciences. London and New York: Routledge Classics (Original work published 1966). ↩ Ibid ↩ Ibid ↩ Ibid ↩ Ibid ↩ \"Different from utopias, which also have no locality, heterotopias are disturbing because they undermine language, make impossible the naming of ‘this' or ‘that', because they shatter both the syntax that humans construct sentences with, as well as the syntax that holds words and things together\" ↩ Foucault, 2002 ↩"}]}